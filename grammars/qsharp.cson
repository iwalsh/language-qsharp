"scopeName": "source.qsharp"
"name": "Q#"
"fileTypes": [
  "qs"
],
"patterns": [
  { "include": "#namespace-declaration" },
  { "include": "#comment" },
  { "include": "#punctuation-semicolon" },
  { "include": "#reserved-csharp-keywords" },  # REVIEW: Is top-level correct?

  # N.B. Q# does not actually allow statements at the top level of a program,
  # but it is very convenient for testing that our grammar does.
  { "include": "#statement" }
],
"repository": {
  "namespace-declaration" : {
    "begin": "(?<!\\.)\\b(namespace)\\b\\s+([[:alpha:]][\\.[:alnum:]]*)\\s*(?=\\{)",
    "beginCaptures": {
      "1": { "name": "keyword.other.qsharp" },
      "2": { "name": "entity.name.namespace.qsharp" },
    },
    "end": "(?<=\\})",
    "patterns": [
      {
        "match": "\\{",
        "name": "punctuation.curlybrace.open.qsharp"
      },
      {
        "match": "\\}",
        "name": "punctuation.curlybrace.close.qsharp"
      },
      { "include": "#open-directive" },
      { "include": "#function-definition" },
      { "include": "#newtype-directive" },
      { "include": "#operation-definition" },
      { "include": "#statement" }  # TODO: Remove. Useful for testing, though
    ]
  },
  "open-directive": {
    "begin": "(?<!\\.)\\b(open)\\b\\s+",
    "beginCaptures": {
      "1": { "name": "keyword.other.qsharp" }
    },
    "end": "(?=;)",
    "patterns": [
      {
        "name": "entity.name.namespace.qsharp",
        "match": "\\b[A-Z][\\.[:alnum:]]*\\b"
      }
    ]
  },
  "function-definition": {
    "begin": "(?<!\\.)\\b(function)\\b\\s+([A-Z][_[:alnum:]]*)\\s*(?=\\()",
    "beginCaptures": {
      "1": { "name": "keyword.other.qsharp" },
      "2": { "name": "entity.name.function.qsharp" }
    },
    "end": "(?=\\{)",
    "patterns": [
      { "include": "#type-definition" },
      {
        "match": "[a-z][_[:alnum:]]*",
        "name": "variable.parameter.qsharp"
      },
      { "include": "#block" }
    ]
  },
  "operation-definition": {
    "begin": "(?<!\\.)\\b(operation)\\b\\s+([A-Z][_[:alnum:]]*)\\s*(?=\\()",
    "beginCaptures": {
      "1": { "name": "keyword.other.qsharp" },
      "2": { "name": "entity.name.function.qsharp" }  # REVIEW: This seems "close enough".
    },
    "end": "(?<=\\})",
    "patterns": [
      { "include": "#type-definition" },
      {
        "match": "[a-z][_[:alnum:]]*",
        "name": "variable.parameter.qsharp"
      },
      {
        "begin": "\\{",
        "beginCaptures": {
          "0": { "name": "punctuation.curlybrace.open.qsharp" }
        },
        "end": "\\}",
        "endCaptures": {
          "0": { "name": "punctuation.curlybrace.close.qsharp" }
        },
        "patterns": [
          { "include": "#body-definition" },
          { "include": "#adjoint-definition" },
          { "include": "#controlled-definition" },
          { "include": "#controlled-adjoint-definition" }
        ]
      }
    ]
  },
  "body-definition": {
    "patterns": [
      {
        "name": "keyword.other.qsharp",
        "match": "\\b(body)\\b"
      },
      { "include": "#block" }
    ]
  },
  "adjoint-definition": {
    "patterns": [
      {
        "name": "keyword.other.qsharp",
        "match": "\\b(adjoint|self|auto)\\b"
      },
      { "include": "#block" }
    ]
  },
  "controlled-definition": {
    "patterns": [
      {
        "name": "keyword.other.qsharp",
        "match": "\\b(controlled|auto)\\b"
      },
      {
        "begin": "\\(",
        "beginCaptures": {
          "0": { "name": "punctuation.parenthesis.open.qsharp" }
        },
        "end": "\\)",
        "endCaptures": {
          "0": { "name": "punctation.parenthesis.close.qsharp" }
        },
        "patterns": [
          {
            "name": "variable.parameter.qsharp",
            "match": "[a-z][_[:alnum:]]*"
          }
        ]
      },
      { "include": "#block" }
    ]
  },
  "controlled-adjoint-definition": {
    "patterns": [
      {
        "name": "keyword.other.qsharp",
        "match": "\\b(adjoint|controlled|auto)\\b"
      },
      {
        "begin": "\\(",
        "beginCaptures": {
          "0": { "name": "punctuation.parenthesis.open.qsharp" }
        },
        "end": "\\)",
        "endCaptures": {
          "0": { "name": "punctation.parenthesis.close.qsharp" }
        },
        "patterns": [
          {
            "name": "variable.parameter.qsharp",
            "match": "[a-z][_[:alnum:]]*"
          }
        ]
      },
      { "include": "#block" }
    ]
  },
  "newtype-directive": {
    "begin": "\\b(newtype)\\b\\s+\\b([[A-Z]][_[:alnum:]]*)\\b\\s*(=)\\s*",
    "beginCaptures": {
      "1": { "name": "keyword.other.qsharp" },
      "2": { "name": "entity.name.type.qsharp" },
      "3": { "name": "keyword.operator.assignment.qsharp" }
    },
    "end": "(?=;)",
    "patterns": [
      { "include": "#type-definition" }
    ]
  },
  "type-definition": {
    "patterns": [
      { "include": "#functor-name" },
      { "include": "#basic-type" },
      {
        "name": "punctuation.arrow.qsharp",
        "match": "->"
      },
      {
        "name": "punctuation.fat-arrow.qsharp",
        "match": "=>"
      },
      { "include": "#punctuation-colon" },
      { "include": "#open-parenthesis" },
      { "include": "#close-parenthesis" },
      { "include": "#punctuation-comma" }
    ]
  },
  "basic-type": {
    "patterns": [
      {
        "comment": "Type parameters, simple types, and array types",
        "name": "entity.name.type.qsharp",
        "match": "(')?[A-Z][_[:alnum:]]*(\\[\\])?"
      }
    ]
  },
  "functor-name": {
    "patterns": [
      {
        "match": "Adjoint|Controlled",
        # REVIEW: correct scope? Maybe support.something?
        "name": "entity.other.functor.qsharp"
      }
    ]
  },
  "comment": {
    "patterns": [
      {
        "begin": "(^\\s+)?(?=//)",
        "beginCaptures": {
          "1": { "name": "punctuation.whitespace.comment.leading.qsharp" }
        },
        "end": "(?=$)",
        "patterns": [
          {
            "comment": "Double-slash comments",
            "name": "comment.line.double-slash.qsharp",
            "begin": "(?<!/)//(?!/)",
            "beginCaptures": {
              "0": { "name": "punctuation.definition.comment.qsharp" }
            },
            "end": "(?=$)"
          },
          {
            "comment": "Documentation (triple-slash) comments",
            "name": "comment.block.documentation.qsharp",
            "begin": "(?<!/)///(?!/)",
            "beginCaptures": {
              "0": { "name": "punctuation.definition.comment.qsharp" }
            },
            "end": "(?=$)",
            "patterns": [
              { "include": "#documentation-comment" }
            ]
          }
        ]
      }
    ]
  },
  "documentation-comment": {
    # TODO: Is there a way to include the Markdown grammar here?
    "patterns": [
      { "include": "#documentation-comment-header" },
      { "include": "#documentation-comment-cross-reference" }
    ]
  },
  "documentation-comment-header": {
    "comment": "A Markdown H1 header in the doc comment",
    "name": "markup.heading.1.md.qsharp"
    "begin": "\\G\\s*(#)\\s+",
    "beginCaptures": {
      "1": { "name": "punctuation.definition.comment-header.qsharp" }
    }
    "end": "\\s*(?=$)"
  },
  "documentation-comment-cross-reference": {
    "comment": "Cross reference to operations, functions, and user-defined types",
    "name": "markup.underline.link.qsharp"
    "begin": "@\"",
    "beginCaptures": {
      "0": { "name": "punctuation.definition.cross-reference.begin.qsharp" }
    }
    "end": "\"",
    "endCaptures": {
      "0": { "name": "punctuation.definition.cross-reference.end.qsharp" }
    }
  },
  "expression": {
    "patterns": [
      { "include": "#interpolated-string" },
      { "include": "#literal" },
      { "include": "#expression-operators" },
      { "include": "#parenthesized-expression" },
      { "include": "#punctuation-range"},  # REVIEW: is this the right home?
      { "include": "#array-creation-expression" },
      { "include": "#array-literal-elements" },
      { "include": "#primitive-type" },  # REVIEW: is this the right spot?
      { "include": "#library-function" },  # REVIEW: is this the right spot?
      { "include": "#callable" },
      { "include": "#identifier" }
    ]
  },
  "statement": {
    "patterns": [
      { "include": "#comment" },
      { "include": "#return-statement" },
      { "include": "#if-statement" },
      { "include": "#else-part" },
      { "include": "#for-statement" },
      { "include": "#repeat-statement" },
      { "include": "#until-statement" },
      { "include": "#fail-statement" },
      { "include": "#let-statement" },
      { "include": "#mutable-statement" },
      { "include": "#set-statement" },
      { "include": "#block" },
      { "include": "#using-or-borrowing-statement" },
      { "include": "#expression" },
      { "include": "#punctuation-semicolon" }
    ]
  },
  "return-statement": {
    "begin": "(?<!\\.)\\b(return)\\b",
    "beginCaptures": {
      "1": { "name": "keyword.control.flow.return.qsharp" }
    },
    "end": "(?=;)"
    # TODO: inner patterns
    "patterns": [
      { "include": "#ref-modifier" },
      { "include": "#expression" }
    ]
  },
  "if-statement": {
    "begin": "(?<!\\.)\\b(if)|(elif)\\b\\s*(?=\\()",
    "beginCaptures": {
      "1": { "name": "keyword.control.conditional.if.qsharp" },
      "2": { "name": "keyword.control.conditional.elif.qsharp" },
    },
    "end": "(?<=\\})",
    "patterns": [
      {
        "begin": "\\(",
        "beginCaptures": {
          "0": { "name": "punctuation.parenthesis.open.qsharp" }
        },
        "end": "\\)",
        "endCaptures": {
          "0": { "name": "punctuation.parenthesis.close.qsharp" }
        },
        "patterns": [
          { "include": "#expression" }
        ]
      },
      { "include": "#statement" }
    ]
  },
  "else-part": {
    "begin": "(?<!\\.)\\b(else)\\b",
    "beginCaptures": {
      "1": { "name": "keyword.control.conditional.else.qsharp" }
    },
    "end": "(?<=\\})",
    "patterns": [
      { "include": "#statement" }
    ]
  },
  "for-statement": {
    "begin": "(?<!\\.)\\b(for)\\b\\s*(?=\\()",
    "beginCaptures": {
      "1": { "name": "keyword.control.loop.for.qsharp" }
    },
    "end": "(?<=\\})",
    "patterns": [
      {
        "begin": "\\(",
        "beginCaptures": {
          "0": { "name": "punctuation.parenthesis.open.qsharp" }
        },
        "end": "\\)",
        "endCaptures": {
          "0": { "name": "punctuation.parenthesis.close.qsharp" }
        },
        "patterns": [
          {
            "match": "\\s*([_[:alpha:]][_[:alnum:]]*)\\s+(in)\\s+",
            "captures": {
              "1": { "name": "entity.name.variable.local.qsharp" },
              "2": { "name": "keyword.control.loop.in.qsharp" }
            }
          },
          {
            "match": "\\b[a-z][_[:alnum:]]*\\b",
            "name": "entity.name.variable.local.qsharp"
          }
          { "include": "#numeric-literal" },
          { "include": "#punctuation-range" }
        ]
      },
      { "include": "#block" }
    ]
  },
  "repeat-statement": {
    "begin": "(?<!\\.)\\b(repeat)\\b",
    "beginCaptures": {
      "1": { "name": "keyword.control.loop.repeat.qsharp" }
    },
    "end": "(?=;|})",  # TODO: should semicolons be allowed?
    "patterns": [
      { "include": "#statement" }
    ]
  },
  "until-statement": {
    "begin": "(?<!\\.)\\b(until)\\b\\s*",
    "beginCaptures": {
      "1": { "name": "keyword.control.loop.until.qsharp" }
    },
    "end": "(?<!\\.)\\b(fixup)\\b\\s*",
    "endCaptures": {
      "1": { "name": "keyword.control.loop.fixup.qsharp" }
    }
    "patterns": [
      { "include": "#expression" } # TODO: enforce boolean expression?
    ]
  },
  "fail-statement": {
    "begin": "(?<!\\.)\\b(fail)\\b",
    "beginCaptures": {
      "1": { "name": "keyword.control.flow.fail.qsharp" }
    },
    "end": "(?=;)",
    "patterns": [
      { "include": "#expression" }
    ]
  },
  "let-statement": {
    "begin": "\\b(let)\\b",
    "beginCaptures": {
      "1": { "name": "keyword.binding.let.qsharp" },
    },
    "end": "(?=;)",
    "patterns": [
      { "include": "#expression" }
    ]
  },
  "mutable-statement": {
    "begin": "\\b(mutable)\\b\\s*\\b([_[:alpha:]][_[:alnum:]]*)\\b\\s*(\\=)\\s*",
    "beginCaptures": {
      "1": { "name": "keyword.binding.mutable.qsharp" },
      # TODO: Should this be "variable.other.readwrite.qsharp"?
      "2": { "name": "entity.name.variable.local.qsharp" },
      "3": { "name": "keyword.operator.assignment.qsharp" }
    },
    "end": "(?=;)",
    "patterns": [
      { "include": "#expression" }
    ]
  },
  "set-statement": {
    "begin": "\\b(set)\\b\\s*\\b([_[:alpha:]][_[:alnum:]]*)\\b\\s*(\\=)\\s*",
    "beginCaptures": {
      "1": { "name": "keyword.binding.set.qsharp" },
      # TODO: Should this be "variable.other.readwrite.qsharp"?
      "2": { "name": "entity.name.variable.local.qsharp" },
      "3": { "name": "keyword.operator.assignment.qsharp" }
    },
    "end": "(?=;)",
    "patterns": [
      { "include": "#expression" }
    ]
  },
  "block": {
    "begin": "\\{",
    "beginCaptures": {
      "0": { "name": "punctuation.curlybrace.open.qsharp" }
    },
    "end": "\\}",
    "endCaptures": {
      "0": { "name": "punctuation.curlybrace.close.qsharp" }
    },
    "patterns": [
      { "include": "#statement" }
    ]
  },
  "using-or-borrowing-statement": {
    "begin": "\\b(using|borrowing)\\b\\s*(\\()?([_[:alpha:]][_[:alnum:]]*)\\s*(\\=)\\s*(Qubit)\\s*(?=\\[)",
    "beginCaptures": {
      "1": { "name": "keyword.other.qsharp" },
      "2": { "name": "punctuation.parenthesis.open.qsharp" },
      "3": { "name": "entity.name.variable.local.qsharp" },
      "4": { "name": "keyword.operator.assignment.qsharp" },
      "5": { "name": "entity.name.type.qsharp" }
    },
    "end": "(?<=\\})",
    "patterns": [
      {
        "begin": "\\[",
        "beginCaptures": {
          "0": { "name": "punctuation.squarebracket.open.qsharp" }
        },
        "end": "\\]",
        "endCaptures": {
          "0": { "name": "punctuation.squarebracket.close.qsharp" }
        },
        "patterns": [
          { "include": "#expression" }
        ]
      },
      { "include": "#close-parenthesis" },
      { "include": "#statement" }
    ]
  },
  "parenthesized-expression": {
    "begin": "\\(",
    "beginCaptures": {
      "0": { "name": "punctuation.parenthesis.open.qsharp" }
    },
    "end": "\\)",
    "endCaptures": {
      "0": { "name": "punctuation.parenthesis.close.qsharp" }
    },
    "patterns": [
      { "include": "#expression" }
    ]
  },
  "punctuation-range": {
    "match": "\\.\\.",
    "name": "punctuation.definition.range.qsharp"
  },
  "array-creation-expression": {
    "begin": "\\b(new)\\b\\s*([A-Z][_[:alnum:]]*)(\\[)",
    "beginCaptures": {
      "1": { "name": "keyword.other.new.qsharp" }
      "2": { "name": "entity.name.type.qsharp" }
      "3": { "name": "punctuation.squarebracket.open.qsharp" }
    },
    "end": "\\]",
    "endCaptures": {
      "0": { "name": "punctuation.squarebracket.close.qsharp" }
    }
    "patterns": [
      { "include": "#expression" }
    ]
  },
  "array-literal-elements": {
    "begin": "\\[",
    "beginCaptures": {
      "0": { "name": "punctuation.squarebracket.open.qsharp" }
    },
    "end": "\\]",
    "endCaptures": {
      "0": { "name": "punctuation.squarebracket.close.qsharp" }
    },
    "patterns": [
      {
        "name": "punctuation.separator.semicolon.qsharp",
        "match": ";"
      },
      { "include": "#expression" },
    ]
  },
  "primitive-type": {
    "patterns": [
      {
        "name": "storage.type.qsharp",
        "match": "(?<!\\.)\\b(Int|Double|Bool|Qubit|Pauli|Result|Range|String)\\b"
      }
    ]
  },
  "library-function": {
    "patterns": [
      {
        "name": "support.function.quantum.qsharp",
        "match": "\\b(X|Y|Z|H|HY|S|T|SWAP|CNOT|CCNOT|MultiX|R|RFrac|Rx|Ry|Rz|R1|R1Frac|Exp|ExpFrac|Measure|M|MultiM)\\b"
      },
      {
        "name": "support.function.builtin.qsharp",
        # TODO: Should "Log" be included here?
        "match": "\\b(Message|Length|Assert|AssertProb|AssertEqual|Random|Floor|Float|Start|Step|Stop)\\b"
      }
    ]
  },
  "identifier": {
    "name": "variable.other.qsharp",
    "match": "[a-z][_[:alnum:]]*"
  },
  "callable": {
    "patterns": [
      {
        "begin": "\\(",
        "beginCaptures": {
          "0": { "name": "punctuation.parenthesis.open.qsharp" }
        },
        "end": "\\)",
        "endCaptures": {
          "0": { "name": "punctuation.parenthesis.close.qsharp" }
        },
        "patterns": [
          { "include": "#functor-name" },
          {
            "name": "entity.name.function.qsharp",
            "match": "\\b[A-Z][_[:alnum:]]*\\b"
          },
          {
            "match": "\\b([_[a-z]][_[:alnum:]]*)\\b",
            "name": "variable.parameter.qsharp"
          }
        ]
      },
      { "include": "#functor-name" },
      {
        "name": "entity.name.function.qsharp",
        "match": "\\b[A-Z][_[:alnum:]]*\\b"
      },
      { "include": "#punctuation-comma" }
    ]
  },
  "literal": {
    "patterns": [
      { "include": "#boolean-literal" },
      { "include": "#numeric-literal" },
      { "include": "#string-literal" },
      { "include": "#tuple-literal" },
      { "include": "#pauli-literal" },
      { "include": "#result-literal" }
    ]
  },
  "boolean-literal": {
    "patterns": [
      {
        "name": "constant.language.boolean.qsharp",
        "match": "(?<!\\.)\\btrue|false\\b"
      }
    ]
  },
  "numeric-literal": {
    "patterns": [
      {
        "name": "constant.numeric.hex.qsharp",
        "match": "\\b0(x|X)[0-9a-fA-F]+\\b"
      }
      {
        "name": "constant.numeric.decimal.qsharp",
        "match": "\\b([0-9]+)?\\.[0-9]+((e|E)[0-9]+)?\\b"
      },
      {
        "name": "constant.numeric.decimal.qsharp",
        "match": "\\b[0-9]+(e|E)[0-9]+\\b"
      },
      {
        "name": "constant.numeric.decimal.qsharp",
        "match": "\\b[0-9]+\\b"
      },
    ]
  },
  "string-literal": {
    "name": "string.quoted.double.qsharp",
    "begin": "(?<!\$)\"",
    "beginCaptures": {
      "0": { "name": "punctuation.definition.string.begin.qsharp" }
    },
    "end": "(\")|((?:[^\\\\\\n])$)",
    "endCaptures": {
      "1": { "name": "punctuation.definition.string.end.qsharp" },
      "2": { "name": "invalid.illegal.newline.qsharp" }
    },
    "patterns": [
      { "include": "#string-character-escape" }
    ]
  },
  "string-character-escape": {
    "name": "constant.character.escape.qsharp",
    "match": "\\\\."
  },
  "interpolated-string": {
    "name": "string.quoted.double.qsharp",
    "begin": "\\$\"",
    "beginCaptures": {
      "0": { "name": "punctuation.definition.string.begin.qsharp" }
    },
    "end": "(\")|((?:[^\\\\\\n])$)",
    "endCaptures": {
      "1": { "name": "punctuation.definition.string.end.qsharp" },
      "2": { "name": "invalid.illegal.newline.qsharp" }
    },
    "patterns": [
      { "include": "#string-character-escape" },
      { "include": "#interpolation" }
    ]
  },
  "interpolation": {
    "name": "meta.interpolation.qsharp",
    "begin": "(?<=[^\\{])((?:\\{\\{)*)(\\{)(?=[^\\{])",
    "beginCaptures": {
      "1": { "name": "string.quoted.double.qsharp" },
      "2": { "name": "punctuation.definition.interpolation.begin.qsharp" }
    },
    "end": "\\}",
    "endCaptures": {
      "0": { "name": "punctuation.definition.interpolation.end.qsharp" }
    },
    "patterns": [
      { "include": "#expression" }
    ]
  },
  "tuple-literal": {
    "begin": "(\\()(?=.*[:,])", # TODO: lookahead unnecessary?
    "beginCaptures": {
      "1": { "name": "punctuation.parenthesis.open.qsharp" }
    },
    "end": "\\)",
    "endCaptures": {
      "0": { "name": "punctuation.parenthesis.close.qsharp" }
    },
    "patterns": [
      { "include": "#expression" },
      { "include": "#punctuation-comma" }
    ]
  },
  "pauli-literal": {
    "patterns": [
      {
        "name": "constant.language.pauli.qsharp",
        "match": "(?<!\\.)\\bPauli(I|X|Y|Z)\\b"
      }
    ]
  },
  "result-literal": {
    "patterns": [
      {
        "name": "constant.language.result.qsharp",
        "match": "(?<!\\.)\\b(One|Zero)\\b"
      }
    ]
  },
  "expression-operators": {
    "patterns": [
      {
        "match": "(?<!=)(=)(?!=)"
        "captures": {
          "1": { "name": "keyword.operator.assignment.qsharp" }
        }
      },
      { "include": "#arithmetic-operators" },
      { "include": "#logical-operators" },
      { "include": "#comparison-operators" },
      { "include": "#relational-operators" },
      { "include": "#bitwise-operators" }
    ]
  },
  "arithmetic-operators": {
    "patterns": [
      {
        "name": "keyword.operator.arithmetic.qsharp",
        "match": "\\+|-|\\*|/|%"
      },
      {
        "match": "(?<!\\^)(\\^)(?!\\^)"
        "captures": {
          "1": { "name": "keyword.operator.arithmetic.qsharp" }
        }
      }
    ]
  }
  "logical-operators": {
    "patterns": [
      {
        "match": "(?<!&)(&&)(?!&)"
        "captures": {
          "1": { "name": "keyword.operator.logical.qsharp" }
        }
      },
      {
        "match": "(?<!\\|)(\\|\\|)(?!\\|)"
        "captures": {
          "1": { "name": "keyword.operator.logical.qsharp" }
        }
      },
      {
        "match": "(!)(?!\\=)"
        "captures": {
          "1": { "name": "keyword.operator.logical.qsharp" }
        }
      }
    ]
  },
  "comparison-operators": {
    "patterns": [
      {
        "name": "keyword.operator.comparison.qsharp"
        "match": "\\=\\=|!\\="
      }
    ]
  },
  "relational-operators": {
    "patterns": [
      {
        "name": "keyword.operator.relational.qsharp"
        "match": "<\\=|>\\="
      },
      {
        "match": "(?<!\\<)(<)(?!\\<|=)"
        "captures": {
          "1": { "name": "keyword.operator.relational.qsharp" }
        }
      },
      {
        "match": "(?<!\\>)(>)(?!\\>|=)"
        "captures": {
          "1": { "name": "keyword.operator.relational.qsharp" }
        }
      }
    ]
  }
  "bitwise-operators": {
    # REVIEW:  Are these negative lookbehinds actually working like I think?
    "patterns": [
      {
        "before": "(?<!\\&)",  # Negative lookbehind `&`
        "end": "(?!\\&)",  # Negative lookahead `&`
        "name": "keyword.operator.bitwise.qsharp"
        "match": "&&&"
      },
      {
        "before": "(?<!\\|)",  # Negative lookbehind `|`
        "end": "(?!\\|)",  # Negative lookahead `|`
        "name": "keyword.operator.bitwise.qsharp"
        "match": "\\|\\|\\|"
      },
      {
        "before": "(?<!\\~)",  # Negative lookbehind `~`
        "end": "(?!\\~)",  # Negative lookahead `~`
        "name": "keyword.operator.bitwise.qsharp"
        "match": "~~~"
      },
      {
        "before": "(?<!\\^)",  # Negative lookbehind `^`
        "end": "(?!\\^)",  # Negative lookahead `^`
        "name": "keyword.operator.bitwise.qsharp"
        "match": "\\^\\^\\^"
      },
      {
        "before": "(?<!\\<)",  # Negative lookbehind `<`
        "end": "(?!\\<)",  # Negative lookahead `<`
        "name": "keyword.operator.bitwise.qsharp"
        "match": "<<<"
      },
      {
        "before": "(?<!\\<)",  # Negative lookbehind `<`
        "end": "(?!\\<)",  # Negative lookahead `<`
        "name": "keyword.operator.bitwise.qsharp"
        "match": ">>>"
      }
    ]
  },
  "punctuation-comma": {
    "name": "punctuation.separator.comma.qsharp",
    "match": ","
  },
  "punctuation-semicolon": {
    "name": "punctuation.terminator.statement.qsharp",
    "match": ";"
  },
  "punctuation-colon": {
    "name": "punctuation.separator.colon.qsharp",
    "match": ":"
  },
  "open-parenthesis": {
    "match": "\\(",
    "name": "punctuation.parenthesis.open.qsharp"
  },
  "close-parenthesis": {
    "match": "\\)",
    "name": "punctuation.parenthesis.close.qsharp"
  },
  "reserved-csharp-keywords": {
    "comment": "Adapted from the grammar inside the Microsoft Quantum Development Kit Visual Studio Extension"
    "patterns": [
      {
        "comment": "C# reserved words which can't be used in Q#, A-D",
        "name": "invalid.illegal.reserved-csharp-keyword.a-d.qsharp",
        "match": "\\b(abstract|as|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double)\\b"
      },
      {
        "comment": "C# reserved words which can't be used in Q#, E-L",
        "name": "invalid.illegal.reserved-csharp-keyword.e-l.qsharp",
        "match": "\\b(enum|event|explicit|extern|finally|fixed|float|foreach|goto|implicit|int|interface|internal|is|lock|long)\\b"
      },
      {
        "comment": "C# reserved words which can't be used in Q#, N-S",
        "name": "invalid.illegal.reserved-csharp-keyword.n-s.qsharp",
        "match": "\\b(null|object|operator|out|override|params|private|protected|public|readonly|ref|sbyte|sealed|short|sizeof|stackalloc)\\b"
      },
      {
        "comment": "C# reserved words which can't be used in Q#, S-V",
        "name": "invalid.illegal.reserved-csharp-keyword.s-v.qsharp",
        "match": "\\b(static|string|struct|switch|this|throw|try|typeof|unit|ulong|unchecked|unsafe|ushort|virtual|void|volatile)\\b"
      }
    ]
  }
}
