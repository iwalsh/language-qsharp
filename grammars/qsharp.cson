"scopeName": "source.qsharp"
"name": "Q#"
"fileTypes": [
  "qs"
],
"patterns": [
  {
    "include": "#comment"
  },
  {
    "include": "#statement"
  }
],
"repository": {
  "comment": {
    "patterns": [
      {
        "begin": "(^\\s+)?(?=//)",
        "beginCaptures": {
          "1": {
            "name": "punctuation.whitespace.comment.leading.qsharp"
          }
        },
        "end": "(?=$)",
        "patterns": [
          {
            # Double-slash comments
            "name": "comment.line.double-slash.qsharp",
            "begin": "(?<!/)//(?!/)",
            "beginCaptures": {
              "0": {
                "name": "punctuation.definition.comment.qsharp"
              }
            },
            "end": "(?=$)"
          },
          {
            # Documentation (triple-slash) comments
            "name": "comment.block.documentation.qsharp",
            "begin": "(?<!/)///(?!/)",
            "beginCaptures": {
              "0": {
                "name": "punctuation.definition.comment.qsharp"
              }
            },
            "end": "(?=$)",
            "patterns": [
              {
                "include": "#documentation-comment"
              }
            ]
          }
        ]
      }
    ]
  },
  "documentation-comment": {
    # TODO: Is there a way to include the Markdown grammar here?
    "patterns": [
      {
        "include": "#documentation-comment-header"
      },
      {
        "include": "#documentation-comment-cross-reference"
      }
    ]
  },
  "documentation-comment-header": {
    "name": "markup.heading.1.md.qsharp"
    "begin": "\\G\\s*(#)\\s+",
    "beginCaptures": {
      "1": {
        "name": "punctuation.definition.comment-header.qsharp"
      }
    }
    "end": "\\s*(?=$)"
  },
  "documentation-comment-cross-reference": {
    "name": "markup.underline.link.qsharp"
    "begin": "@\"",
    "beginCaptures": {
      "0": {
        "name": "punctuation.definition.cross-reference.begin.qsharp"
      }
    }
    "end": "\"",
    "endCaptures": {
      "0": {
        "name": "punctuation.definition.cross-reference.end.qsharp"
      }
    }
  },
  "statement": {
    "patterns": [
      {
        "include": "#comment"
      },
      {
        "include": "#return-statement"
      }
      {
        "include": "#if-statement"
      },
      {
        "include": "#else-part"
      },
      {
        "include": "#for-statement"
      },
      {
        "include": "#repeat-statement"
      },
    ]
  },
  "return-statement": {
    "begin": "(?<!\\.)\\b(return)\\b",
    "beginCaptures": {
      "1": {
        "name": "keyword.control.flow.return.qsharp"
      }
    },
    "end": "(?=;)"
    # TODO: inner patterns
    "patterns": [
      {
        "include": "#ref-modifier"
      },
      {
        "include": "#expression"
      }
    ]
  },
  "if-statement": {
    "begin": "(?<!\\.)\\b(if)|(elif)\\b\\s*(?=\\()",
    "beginCaptures": {
      "1": {
        "name": "keyword.control.conditional.if.qsharp"
      },
      "2": {
        "name": "keyword.control.conditional.elif.qsharp"
      },
    },
    "end": "(?<=\\})",
    "patterns": [
      {
        "begin": "\\(",
        "beginCaptures": {
          "0": {
            "name": "punctuation.parenthesis.open.qsharp"
          }
        },
        "end": "\\)",
        "endCaptures": {
          "0": {
            "name": "punctuation.parenthesis.close.qsharp"
          }
        },
        "patterns": [
          {
            "include": "#expression"
          }
        ]
      },
      {
        "include": "#statement"
      }
    ]
  },
  "else-part": {
    "begin": "(?<!\\.)\\b(else)\\b",
    "beginCaptures": {
      "1": {
        "name": "keyword.control.conditional.else.qsharp"
      }
    },
    "end": "(?<=\\})",
    "patterns": [
      {
        "include": "#statement"
      }
    ]
  },
}
