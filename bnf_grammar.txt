This grammar is my own best effort at modeling the Q# language - it is NOT official documentation or endorsed by Microsoft in any way. Use at your own risk!

<statement> ::= <comment>
             |  <return-statement>
             |  <if-statement>
             |  <else-part>
             |  <for-statement>
             |  <repeat-statement>
             |  <until-statement>
             |  <fail-statement>
             |  <let-statement>
             |  <mutable-statement>
             |  <set-statement>
             |  <newtype-statement>
             |  <block>

<expression> ::= <interpolated-string>
              |  <literal>
              |  <expression-operators>
              |  <identifier>
              |  <parenthesized-expression>
              |  <punctuation-range>
              |  <array-creation-expression>
              |  <primitive-type>

<parenthesized-expression> ::= "(" <expression> ")"

<punctuation-range> ::= ".."

<primitive-type> ::= "Int" | "Double" | "Bool" | "Qubit" | "Pauli"
                  |  "Result" | "Range" | "String"

<identifier> ::= /[_[:alpha:]][_[:alnum:]]*/

<array-creation-expression> ::= "new" /[A-Z][_[:alnum:]]*/<bracketed-argument-list>

<bracketed-argument-list> ::= <expression>
                           |  <expression> ";" <bracketed-argument-list>


<expression-operators> ::= "="
                        |  <arithmetic-operators>
                        |  <logical-operators>
                        |  <comparison-operators>
                        |  <relational-operators>
                        |  <bitwise-operators>

<arithmetic-operators> ::= "%" | "*" | "+" | "-" | "/" | "^"

<logical-operators> ::=  "!" | "&&" | "||"

<comparison-operators> ::= "==" | "!="

<relational-operators> ::= "<=" | ">=" | "<" | ">"

<bitwise-operators> ::= "~~~" | "^^^" | "&&&" | "|||" | "<<<" | ">>>"

<literal> ::= <boolean-literal>
           |  <numeric-literal>
           |  <string-literal>
           |  <tuple-literal>

<boolean-literal> ::= "true" | "false"

<numeric-literal> ::= `bare integer`
                   |  `bare float`
                   |  `integer with exponent`
                   |  `float with exponent`
                   |  `hexadecimal`

<string-literal> ::= `double-quoted string`

<comment> ::= `double-slash comment` | `triple-slash (doc) comment`

<reserved-csharp-keyword.a-d> ::= abstract|as|base|bool|break|byte|case|catch
                               |  char|checked|class|const|continue|decimal
                               |  default|delegate|do|double

<reserved-csharp-keyword.e-l> ::= enum|event|explicit|extern|finally|fixed
                               |  float|foreach|goto|implicit|int|interface
                               |  internal|is|lock|long

<reserved-csharp-keyword.n-s> ::= null|object|operator|out|override|params
                               |  private|protected|public|readonly|ref|sbyte
                               |  sealed|short|sizeof|stackalloc

<reserved-csharp-keyword.s-v> ::= static|string|struct|switch|this|throw|try
                               |  typeof|unit|ulong|unchecked|unsafe|ushort
                               |  virtual|void|volatile
